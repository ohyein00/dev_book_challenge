# 개요,사용,에러

### 프라미스란

- 비동기 작업의 결과를 나타내는 객체. 
결과가 준비 되었을 수도, 아닐 수도 있는 막연한 상태를 표현함
- 프라미스 객체에 콜백을 등록하고 비동기 작업이 끝날 때 호출함
- 콜백 지옥을 이해하기 쉽게 해결해줌.
- 콜백의 어려운 에러 처리 방법을 표준화 하고 에러를 정확히 전달해줌

### 주의

- 콜백은 단 한 번만 실행되기 때문에 `setInterval`같은 콜백 반복 호출엔 적합하지 않음
- 이벤트 핸들러에는 프라미스를 사용하지 않음. 한번 클릭한 후 이후 대응할 수 없음

### 프라미스의 사용 - then

```jsx
getJSON(url).then(jsonData => {})
```

- then에 등록된 함수는 단 한번만 호출 됨
- 콜백 등록 메서드라고 이해
- 프라미스 객체를 변수에 할당하는 단계를 거치지 않고 그대로 이어 붙임
- 프라미스가 정상적으로 반환된다면 then에 전달함

### 프라미스의 에러 처리 - catch

```jsx
getJSON(url).then(successCallback, errorCallback)
```

프라미스 객체가 반환된 후에 동작이 이루어 지므로, 
이 동작이 값을 반환할 지 예외를 일으킬 지 알 수 없음.

또한 비동기적 작업에서는 호출자가 스택에 없기 때문에 호출자에게 예외를 전달할 수 없음

getJSON은 에러가 일어났을 때 errorCallback에 Error객체와 같은 것을 전달 함

```jsx
getJSON(url).then(successCallback).catch(errorCallback)
```

일반적으로 위처럼 처리함.

여기서 catch 메서드는 then을 호출하면서 첫번째 인자로 null, 두 번째 인자로 지정된 에러 핸들러를 전달하는 형태를 줄인 것 뿐

→ 이에 displayUserProfile에서 일어난 예외를 전달 할 수 잇음
