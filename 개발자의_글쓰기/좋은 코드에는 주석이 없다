## 이름을 잘 지으면 주석을 대폭 줄일 수 있다.

- 안 좋은 예
    - const h = 480
    - leverlUser()
- 좋은 예
    - const screenHeightMax = 480
    - classifyUserAndReturnClass()

## 처음부터 주석 없이 코딩하는 연습을 하자

- 안 좋은 예
    
    ```tsx
    {
    "OK":true, //요청에 대한 성공/실패 구분
    "Value" : {//요청에 대한 결과가 표시됨
    "success":[]//구독자 추가 성공
    "update":이미 있는 구독자 필드를 업데이트
    }}
    ```
    

- 좋은 예

```tsx
{
"isRequestSuccess":true, 
"Value" : {
"create":[]
"updateInformationExceptEmail":
}}
```

## 주석이 필요할 때

개발자마다 영어 실력에 차이가 있는 경우, 좀 더 명확한 의미 전달을 위함

> checkUserNameUnder3Characters()
> 

위는 언듯 3글자 이하라고 제한한 것 같지만, 미만임

이하는 이렇게 표현됨

- 3 and under
- 3 or less
- 3 or below

미만은 이렇게 표현됨

- under 3
- below 3
- less than 3

영어를 잘 하는 개발자는 당연히 3글자 미만이라고 생각해서 의미 전달이 안됨. 따라서

“3글자 이하인지 체크” 와 같은 주석을 붙이게 됨. 

주석이 쓸모없고 소용없는 것은 아님. 제 역할에만 충실하면 됨

## 다른 개발자를 배려하는 주석 쓰기

의도 전달을 코드로만 표현하기엔 너무 긴 이름으로 인해 가독성이 떨어질 때가 있음

아래의 경우에는 주석이 도움됨

- **이유를 알려주는 것**.
 e.g) null 대신 0을 쓴 이유
- **개발자가 새롭게 발견한 것.** 
e.g) 해당 방식은 결괏값을 2배 빠르게 보여준다
- **예상 질문과 답.** 
e.g) ~가 궁금하다면 어디를 확인하자
- **할 일이나 주의, 개선 아이디어를 주는 것**. 
e,g) 동영상이 아닌 확장자를 확인하도록 할 것, null이 입력되면 무한루프..
- **다른 사람에게 보완을 요청하는 것.** 
e.g)전역변수의 오류로 이 클래스는 엉망이 되었다. 누군가 고쳐달라
- **개발자의 속마음**.
 e,g) 팀의 컨벤션만 아니면 클래스명부터 바꿨을 것

## 주석의 반복

개발 가이드 문서에서는 같은 주석이 수없이 반복된다.

이는 코드를 처음부터 읽지 않고 필요할 때 검색해서 보는 경우 차근차근 읽지 않기 때문에

이런 독자를 배려한 것

## 주석의 발췌와 요약

중요한 것을 뽑으려면 덜 중요한 것을 빼야 한다.

예를 들어

> 사용자가 레벨업하려면 로그인을 10회 이상하고 게시물을 5개 이상 작성해야 한다
> 

이것을

> 승급 조건이 되면 승급한다
> 

라고 발췌하여 요약한다.

## 주석도 코드다

코드는 디버깅으로 바로잡을 수 있지만 주석은 어렵다.

제대로 된 유지보수가 되지 않거나 잘못 복붙이 된다면 주석은 신뢰를 읽고 악순환에 빠진다.

꼭 필요한 주석은 반드시 코드처럼 다뤄야 한다.
