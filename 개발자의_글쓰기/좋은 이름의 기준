## 좋은 이름이 가진 5가지 특징

- 검색하기 쉽고
- 조합하기 쉽고
- 수긍하기 쉽고
- 기억하기 쉽고
- 입력하기 쉽고

## 검색하기 쉽게 이름 짓는 법

한 단계 상위 범주의 이름을 태그처럼 덧붙이기.

> e.g ) 소나무/참나무/배나무 → 나무가 상위 범주
> 

코드 검색에 쉽게 걸리게 하기 위함

- BAD
    - SERVER_TIMEOUT
    - NO_RESULT
    - BAD_RESULT
- GOOD
    - ERROR_SERVER_TIMEOUT
    - ERROR_NO_RESULT

하지만 같은 접두어를 가진 함수나 변수의 개수가 너무 많으면 체계를 다듬을 필요가 있음.

섬색할 일이 정말 많은지, 바로 찾고 이해할 수 있는지, 컨벤션에 맞는지 따져볼 것

## 조합하기 쉽게 이름 짓는 법

> e.g) class ”big_strong_text” “strong_text”
> 

속성으로 이름을 지은다면 조건이 바뀔 때 마다 수정해야 하는 상황이 옴

→ 개념으로 이름 짓기

하지만 개념으로 이름을 지어도 계속해서 이름을 지어야 할 수 있음. e.g) title/subtitle

이럴 경우 개발 언어의 문법과 조합하는 것이 좋다.

> h1.title / h2.title
> 

## 수긍하기 쉽게 이름 짓는 법

논리적 정합성 보단 그 상황에서 마땅하다고 생각하는 것이 수긍하기 쉬운 이름

외국에서는 영어식 이름을 쓰는 것이 소통하는 것이 더 낫듯이

```tsx
for(int i = 0; ... ){
	for(int j = 0; ...){
	for(int k = 0; ...){
		}
	}
}
```

위 경우에는 i,j,k는 좋지 않음. 다른 이름을 고려해봐야

하지만 중첩이 적을 경우엔 굳이 이름을 짓는 수고를 할 필요까진 없다.

→ 이름 짓기도 효율적으로 하기
